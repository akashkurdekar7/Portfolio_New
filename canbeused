// import {useEffect, useState} from "react";
// import {motion} from "framer-motion";
// import Button from "../Button/Button";
// import "./Navbar.css";
// const sections = ["about", "projects", "contact"];

// const NavBar = () => {
//   const [activeTitles, setActiveTitles] = useState([]);
//   const [scrollProgress, setScrollProgress] = useState(0);

//   useEffect(() => {
//     const handleScroll = () => {
//       const totalHeight =
//         document.documentElement.scrollHeight - window.innerHeight;
//       const progress = (window.scrollY / totalHeight) * 100;
//       setScrollProgress(progress);

//       let newActiveTitles = [];
//       sections.forEach((section) => {
//         const sectionElement = document.getElementById(section);
//         if (sectionElement) {
//           const rect = sectionElement.getBoundingClientRect();
//           if (rect.top <= 50 && rect.bottom > 50) {
//             newActiveTitles.push(
//               section.charAt(0).toUpperCase() + section.slice(1)
//             );
//           }
//         }
//       });

//       setActiveTitles((prev) =>
//         JSON.stringify(prev) !== JSON.stringify(newActiveTitles)
//           ? newActiveTitles
//           : prev
//       );
//     };

//     window.addEventListener("scroll", handleScroll);
//     return () => window.removeEventListener("scroll", handleScroll);
//   }, []);

//   return (
//     <>
//       {/* Navigation Bar */}
//       <div
//         className={`postion-relative nav-container fixed-top w-100 px-4 py-2 border border-dark ${
//           activeTitles.length === 0 ? "d-none" : ""
//         }`}
//         style={{
//           backgroundColor: "#F5F5DC",
//           color: "#000",
//           boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
//         }}>
//         <motion.div
//           className="d-flex justify-content-center gap-4"
//           initial={{opacity: 0}}
//           animate={{opacity: 1}}>
//           {activeTitles.map((title, index) => (
//             <Button key={index}>{title}</Button>
//           ))}
//         </motion.div>
//       </div>

//       {/* Floating Elements */}
//       <div className="email">
//         <h5 className="text-white size16 text-uppercase">
//           akashkurdekar39@gmail.com
//         </h5>
//       </div>
//       {/* Progress Bar */}
//       <div className="bar">
//         <div className="progress m-2" style={{height: "4px"}}>
//           <div
//             className="progress-bar text-red"
//             role="progressbar"
//             style={{
//               width: `${scrollProgress}%`,
//               background: "linear-gradient(to bottom, #e84545, #e84545)",
//               boxShadow: "0 0 5px #e84545, 0 0 10px #e84545",
//               borderRadius: "2px",
//               transition: "width 0.3s ease-in-out",
//             }}
//             aria-valuenow={scrollProgress}
//             aria-valuemin="0"
//             aria-valuemax="100"></div>
//         </div>
//       </div>
//     </>
//   );
// };

// export default NavBar;



import React, {useState, useEffect, useRef} from "react";
import "./Projects.css";

const items = [
  {
    id: 1,
    title: "Amma's Pastry Clone",
    description:
      "Recreated Amma's Pastry website with responsive design, rich visuals, and intuitive navigation.",
    image:
      "https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?auto=format&fit=crop&w=600&h=900",
  },
  {
    id: 2,
    title: "Online Contest Platform",
    description:
      "Developed a frontend for a contest platform with leaderboard logic, timer integration, and form validation.",
    image:
      "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=600&h=900",
  },
  {
    id: 3,
    title: "Knight-Bite Clone",
    description:
      "Cloned the Knight-Bite food delivery site using React, with animations and smooth scrolling behavior.",
    image:
      "https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?auto=format&fit=crop&w=600&h=900",
  },
  {
    id: 4,
    title: "Kraftopia Landing Page",
    description:
      "Designed a fictional arts & crafts website with a product showcase layout and hover animations.",
    image:
      "https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?auto=format&fit=crop&w=600&h=900",
  },
  {
    id: 5,
    title: "Expense Tracker Dashboard",
    description:
      "Built a responsive expense tracker using React, charts, and local storage for budget visualization.",
    image:
      "https://images.unsplash.com/photo-1487058792275-0ad4aaf24ca7?auto=format&fit=crop&w=600&h=900",
  },
  {
    id: 6,
    title: "Parallax Portfolio Site",
    description:
      "Created a parallax single-page website with scroll-based animations and optimized Lighthouse scores.",
    image:
      "https://images.unsplash.com/photo-1605810230434-7631ac76ec81?auto=format&fit=crop&w=600&h=900",
  },
];

const Project = () => {

  
  const [rotationAngle, setRotationAngle] = useState(0);

  const [activeIndex, setActiveIndex] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);
  const containerRef = useRef(null);
  const [fullscreenCard, setFullscreenCard] = useState(null);

  // Calculate positions for each card to form a C shape
  const getCardStyle = (index) => {
    const totalItems = items.length;
    const middleIndex = Math.floor(totalItems / 2);

    // Calculate the angle in the C-shaped arc
    // Map the index to an angle between -75 and 75 degrees
    const maxAngle = 75; // Max angle of the C shape
    const angleStep = (maxAngle * 2) / (totalItems - 1);
    const angle = -maxAngle + index * angleStep;

    // Calculate the distance from the center for the C shape
    const radius = 600; // Radius of our C shape

    // Convert angle to radians for positioning
    const angleRad = (angle * Math.PI) /180;

    // Calculate x and z positions on the C shape
    const x = Math.sin(angleRad) * radius;
    const z = Math.cos(angleRad) * radius - radius;

    // Calculate scale and opacity based on distance from active index
    const distance = Math.abs(index - activeIndex);
    const scale = 1 - Math.min(distance * 0.05, 0.3);
    const opacity = 1 - Math.min(distance * 0.15, 0.7);

    // Determine if this card is active
    const isActive = index === activeIndex;

    return {
      transform: `translateX(${x}px) translateZ(${z}px) rotateY(${-angle}deg) scale(${scale})`,
      opacity,
      zIndex: totalItems - distance,
      filter: isActive ? "none" : "brightness(0.7)",
    };
  };

  const handlePrev = () => {
    setActiveIndex((prev) => (prev > 0 ? prev - 1 : items.length - 1));
  };

  const handleNext = () => {
    setActiveIndex((prev) => (prev < items.length - 1 ? prev + 1 : 0));
  };

  const handleMouseDown = (e) => {
    setIsDragging(true);
    setStartX(e.pageX - (containerRef.current?.offsetLeft || 0));
    setScrollLeft(activeIndex);
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleMouseMove = (e) => {
    if (!isDragging) return;
    e.preventDefault();

    const x = e.pageX - (containerRef.current?.offsetLeft || 0);
    const dragDistance = (x - startX) / 100; // Adjust sensitivity

    // Update the active index based on drag distance
    const newIndex = Math.round(scrollLeft - dragDistance);

    // Constrain to valid indices
    if (newIndex >= 0 && newIndex < items.length) {
      setActiveIndex(newIndex);
    }
  };

  const handleCardClick = (index) => {
    if (index === activeIndex) {
      setFullscreenCard(items[index]);
    } else {
      setActiveIndex(index);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      handlePrev();
    } else if (e.key === "ArrowRight") {
      handleNext();
    } else if (e.key === "Escape" && fullscreenCard) {
      setFullscreenCard(null);
    }
  };

  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [fullscreenCard]);

  return (
    <div className="project-slider-container" id="projects">
      <div
        ref={containerRef}
        className="project-slider-stage"
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onMouseMove={handleMouseMove}>
        <div className="project-slider-track">
          {items.map((item, index) => (
            <div
              key={index}
              className={`project-card ${
                index === activeIndex ? "active" : ""
              }`}
              style={getCardStyle(index)}
              onClick={() => handleCardClick(index)}>
              <div className="project-card-image-container">
                <img
                  src={item.image}
                  alt={item.title}
                  className="project-card-image"
                  loading="lazy"
                />
              </div>
              <div className="project-card-overlay">
                <h3 className="project-card-title">{item.title}</h3>
                {index === activeIndex && (
                  <p className="project-card-description">{item.description}</p>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="project-controls">
        <button
          className="project-control prev"
          onClick={handlePrev}
          aria-label="Previous slide">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round">
            <path d="m15 18-6-6 6-6" />
          </svg>
        </button>
        <button
          className="project-control next"
          onClick={handleNext}
          aria-label="Next slide">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round">
            <path d="m9 18 6-6-6-6" />
          </svg>
        </button>
      </div>

      {/* Fullscreen view */}
      {fullscreenCard && (
        <div
          className="project-fullscreen-overlay"
          onClick={() => setFullscreenCard(null)}>
          <div
            className="project-fullscreen-content"
            onClick={(e) => e.stopPropagation()}>
            <button
              className="project-fullscreen-close-btn"
              onClick={() => setFullscreenCard(null)}
              aria-label="Close fullscreen view">
              &times;
            </button>
            <div className="project-fullscreen-image-container">
              <img
                src={fullscreenCard.image}
                alt={fullscreenCard.title}
                className="project-fullscreen-image"
              />
            </div>
            <div className="project-fullscreen-details">
              <h2>{fullscreenCard.title}</h2>
              <p>{fullscreenCard.description}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


export default Project;


.project-slider-container {
  position: relative;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

.project-slider-stage {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  perspective: 1500px;
  transform-style: preserve-3d;
  cursor: grab;
}

.project-slider-stage:active {
  cursor: grabbing;
}

.project-slider-track {
  position: relative;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  perspective: 1500px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.project-card {
  position: absolute;
  width: 300px;
  height: 450px;
  border-radius: 16px;
  overflow: hidden;
  transform-style: preserve-3d;
  transition: transform 0.6s cubic-bezier(0.19, 1, 0.22, 1),
    opacity 0.6s cubic-bezier(0.19, 1, 0.22, 1),
    filter 0.6s cubic-bezier(0.19, 1, 0.22, 1);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  cursor: pointer;
  backface-visibility: hidden;
  transition: transform 0.6s ease, opacity 0.6s ease, filter 0.6s ease;
}

.project-card.active {
  filter: brightness(1) !important;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.7);
}

.project-card-image-container {
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.project-card-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.5s;
}

.project-card:hover .project-card-image {
  transform: scale(1.05);
}

.project-card-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 24px;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.9), transparent);
  color: #fff;
  opacity: 0.95;
  transform: translateZ(1px);
}

.project-card-title {
  margin: 0 0 8px;
  font-size: 1.25rem;
  font-weight: 600;
}

.project-card-description {
  margin: 0;
  font-size: 0.875rem;
  opacity: 0.85;
  max-height: 80px;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
}

.project-controls {
  position: absolute;
  bottom: 40px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 16px;
  z-index: 10;
}

.project-control {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  border: none;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s;
  backdrop-filter: blur(10px);
}

.project-control:hover {
  background: rgba(255, 255, 255, 0.2);
}

/* Fullscreen view */
.project-fullscreen-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.9);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 48px;
  animation: projectFadeIn 0.3s ease-out;
}

.project-fullscreen-content {
  position: relative;
  width: 90%;
  max-width: 1200px;
  height: 90%;
  background-color: #111;
  border-radius: 12px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  animation: projectScaleIn 0.3s ease-out;
}

.project-fullscreen-close-btn {
  position: absolute;
  top: 16px;
  right: 16px;
  width: 40px;
  height: 40px;
  background: rgba(0, 0, 0, 0.5);
  color: white;
  font-size: 24px;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
}

.project-fullscreen-image-container {
  flex: 1;
  overflow: hidden;
}

.project-fullscreen-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.project-fullscreen-details {
  padding: 24px;
  background-color: #111;
  color: white;
}

.project-fullscreen-details h2 {
  margin: 0 0 16px;
  font-size: 1.75rem;
  font-weight: 700;
}

.project-fullscreen-details p {
  margin: 0;
  font-size: 1rem;
  line-height: 1.6;
  opacity: 0.8;
}

@keyframes projectFadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes projectScaleIn {
  from {
    transform: scale(0.95);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .project-card {
    width: 240px;
    height: 360px;
  }

  .project-fullscreen-content {
    width: 95%;
    height: 80%;
  }
}

@media (max-width: 480px) {
  .project-card {
    width: 200px;
    height: 300px;
  }

  .project-card-title {
    font-size: 1rem;
  }

  .project-controls {
    bottom: 20px;
  }
}
